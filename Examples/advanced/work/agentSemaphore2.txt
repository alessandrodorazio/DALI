:- use_module(library(aggregate)).
:- use_module(library(lists)).

:- dynamic(strada_libera/1).
:- dynamic(vettura_prenotata/3).

:- 
    write('Sono un semaforo!'),
    assertz(strada_libera(true)).

/* ricezione richiesta di attraversamento, potrebbe essere sufficiente aggiungere la vettura_prenotata all KB */
richiesta_attraversamentoE(Id, Priorita):>
    now(Timestamp),
    assertz(vettura_prenotata(Id, Priorita, Timestamp)),
    format('La macchina con id ~w ha chiesto di attraversare al tempo ~2f', [Id, Timestamp]), nl.

/* seleziono la macchina successiva */
elabora_codaA:-
    write('Elaboro la coda...'), nl,

    max_member(B, vettura_prenotata(_,B,_)),
    write(B),

    vettura_prenotata(A, B, C),

    format('Macchina successiva: ~d', Id), nl,
    retract(strada_libera(true)),
    assertz(strada_libera(false)),
    concedi_autorizzazioneA(A).
    
    

/* comunico alla macchina successiva di poter attraversare incrocio */
concedi_autorizzazioneA(Id):-
    format('Ora la macchina con id ~d puo passare', Id), nl,
    number_chars(Id, App),
    atom_chars(IdString, App),
    atom_concat('agentCar', IdString, AgentName),
    messageA(AgentName, propose(attraversamento, [], Me)).

/* ricezione termine attraversamento, dire alla macchina successiva che può attraversare */
termine_attraversamentoE(Id):> 
    retract(vettura_prenotata(Id,_,_)),
    format('La macchina con id ~d mi ha comunicato di aver terminato di attraversare', Id), nl,
    retract(strada_libera(false)),
    assertz(strada_libera(true)).

strada_libera :-
    write('').

/* se la strada è libera */
strada_liberaI :-
    strada_libera(X),
    true == X,
    vettura_prenotata(Id,Priorita,Timestamp),
    elabora_codaA.    